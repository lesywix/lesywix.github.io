<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lesywix.github.io</id>
    <title>Lesywix</title>
    <updated>2020-03-02T16:44:50.159Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lesywix.github.io"/>
    <link rel="self" href="https://lesywix.github.io/atom.xml"/>
    <subtitle>做了点微小的贡献，谢谢大家</subtitle>
    <logo>https://lesywix.github.io/images/avatar.png</logo>
    <icon>https://lesywix.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Lesywix</rights>
    <entry>
        <title type="html"><![CDATA[Git 重写历史]]></title>
        <id>https://lesywix.github.io/post/git-chong-xie-li-shi/</id>
        <link href="https://lesywix.github.io/post/git-chong-xie-li-shi/">
        </link>
        <updated>2020-03-02T16:38:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="修改最后一次提交"><strong>修改最后一次提交</strong></h2>
<p>有的时候你可能会想修改<strong>上一次</strong>提交的信息，或者添加删除某些忘记的文件，那么在<code>git add</code>（若有文件变更）将待更改的文件加入后可以简单的执行：<code>git commit --amend</code><br>
这时会进入上次 commit 的文本编辑器，包含你上次提交的信息供你修改。你只需要修改为你想要的信息然后保存即可，保存退出后，在 log 中可以发现最近一次提交的信息已经被成功替换，并且 git hash 也已经改变（变基操作）。<br>
若前一次的 commit 已经 push 到远程仓库，我们怎么修改远程仓库上次的 commit 呢？只需在上一步基础上执行：<code>git push --force</code>，该操作会将本地的提交覆盖远程仓库上一次的 commit。<br>
<strong>由于这是变基操作，会覆盖历史，确保本地操作后的结果是自己想要的。</strong></p>
<p><strong>rebase 黄金法则：never use it on public branches. 不要在公共的branch上使用</strong></p>
<h3 id="example"><strong>Example:</strong></h3>
<p><code>git log</code>中存在一个 commit ,此时 git 仓库有 file_1.txt 文件，并且有新建的 file_2.txt（假设是我们在上次 commit 中忘记添加的文件）</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/04/29/5cc6fc5163289.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc5163289.jpg" loading="lazy"></figure>
<p>这时，我们执行 <code>git commit --amend</code> 进入文本编辑器，将信息更改为如下内容并保存退出：</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2019/04/29/5cc6fc5398ed4.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc5398ed4.jpg" loading="lazy"></figure>
<p>再次执行 <code>git log</code> 发现 git hash 与 commit 都已经发生改变</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2019/04/29/5cc6fc55a2f66.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc55a2f66.jpg" loading="lazy"></figure>
<hr>
<h2 id="修改多个提交信息"><strong>修改多个提交信息</strong></h2>
<p>如果我们想修改不止前一次的提交，那么可以通过变基的操作修改一系列的提交：<br>
命令：<code>git rebase -i</code>进行交互式变基，后面可以接<code>HEAD~X</code>X代表指定修改前X次提交（如 HEAD~3）<br>
也可以从<code>git log</code>中直接复制想要修改到哪次的 HASH 值。接下来同样会进入文本编辑交互界面，根据提示信息修改相应的 action 后保存即可（后面提供 🌰）。<br>
一般 action 有如下：</p>
<pre><code># Commands:
#  p, pick = use commit（默认 option）
#  r, reword = use commit, but edit the commit message（即修改 commit 信息）
#  e, edit = use commit, but stop for amending（修改 commit 信息，并在每条 commit 信息都会停下来，此时可以修改文件再 commit）
#  s, squash = use commit, but meld into previous commit（合并前一次提交组成新的提交）
#  f, fixup = like &quot;squash&quot;, but discard this commit's log message（合并 commit，不组成新的提交）
#  x, exec = run command (the rest of the line) using shell（执行 shell 命令）
#  d, drop = remove commit（将此条 commit 删除）
</code></pre>
<p>需要注意的是在交互列表内的 commit 信息与 git log 中的信息是相反的，因为 git 会重演提交信息，所以旧的 log 会排在前面。</p>
<h3 id="example-2"><strong>Example:</strong></h3>
<p><code>git log</code></p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2019/04/29/5cc6fc58158e2.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc58158e2.jpg" loading="lazy"></figure>
<p>这里我们想要拆分第一条 commit，合并第二，三条 commit<br>
于是我们执行 <code>git rebase -i HEAD~3</code> 进入交互界面对前三条 commit 进行修改（注意是倒序）<br>
第一条 action 改为了 reword，因为后面的 fixup 会来合并，这时我们需要修改第一条的 commit （合并信息）<br>
第二条 action 改为了 fixup，它会将改动自动合并到前一个 commit<br>
第三条 action 改为了 edit，这时 rebase 会停下来等待修改完毕并执行 <code>git rebase --continue</code> 来完成，为了将这个 commit <code>Add file_5.txt and file_6.txt</code> 拆为两条信息，我们需要修改本地的文件并重新进行 commit。<br>
现在我们保存并退出编辑器，继续接下来的操作<br>
（下图也印证了上面说的 commit 与 git log 信息相反，rebase 的执行是按下图的执行顺序，除了能自动执行，都得进行 rebase --continue 继续下一个 action）</p>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2019/04/29/5cc6fc5b3e55e.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc5b3e55e.jpg" loading="lazy"></figure>
<p>退出后马上又进入了编辑器，还记得我们前面将第一条 action 改成了 reword 吗？这里提交我们需要修改的 commit（加上了file_4.txt）并保存退出</p>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2019/04/29/5cc6fc5e001eb.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc5e001eb.jpg" loading="lazy"></figure>
<p>然后我们可以发现 rebase stopped at <code>Add file_5.txt and file_6.txt</code> 即 action 为 edit  commit 并且 git log 中 <code>Add file_3.txt and file_4.txt</code> 已经成功合并</p>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2019/04/29/5cc6fc6162333.jpg" alt="https://i.loli.net/2019/04/29/5cc6fc6162333.jpg" loading="lazy"></figure>
<p>那么如何拆分 commit 呢？我们就需要修改本地文件重新提交，此时 git log 可以发现暂存区是空的，并已提交到代码仓库，为了测回提交，我们用 <code>git reset HEAD^</code> 回退到上个状态</p>
<figure data-type="image" tabindex="8"><img src="https://i.loli.net/2020/03/03/GRw6VXJUxcpOPBm.png" alt="image.png" loading="lazy"></figure>
<p>这时就可以重新进行 commit 提交啦</p>
<figure data-type="image" tabindex="9"><img src="https://i.loli.net/2020/03/03/hok3q2OIbTCzGLa.png" alt="image.png" loading="lazy"></figure>
<h2 id="提醒"><strong>提醒</strong></h2>
<p>git rebase 用时一时爽，但切记黄金法则，在属于自己的分支上进行操作即可，如果在公共分支上进行 rebase，若你的队友本地已经有保存的副本，分支又被你改了，那就要注意人身安全了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django admin 移除更改删除操作]]></title>
        <id>https://lesywix.github.io/post/django-admin-yi-chu-geng-gai-shan-chu-cao-zuo/</id>
        <link href="https://lesywix.github.io/post/django-admin-yi-chu-geng-gai-shan-chu-cao-zuo/">
        </link>
        <updated>2020-02-29T15:15:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="移除-action"><strong>移除 action</strong></h2>
<p>在你的 ModelAdmin 中添加 <code>action = None</code></p>
<hr>
<h2 id="移除添加按钮"><strong>移除添加按钮</strong></h2>
<p>在你的 ModelAdmin 中添加</p>
<pre><code>def has_add_permission(self, request):    
		return False
</code></pre>
<hr>
<h2 id="移除删除按钮"><strong>移除删除按钮</strong></h2>
<p>在你的 ModelAdmin 中添加</p>
<pre><code>def has_delete_permission(self, request, obj=None):
  return False
</code></pre>
<hr>
<h2 id="移除-savesave-and-continue-editing"><strong>移除 save，save and continue editing</strong></h2>
<p>在你的 ModelAdmin 中添加</p>
<pre><code># hidden save button
READONLY_EXTRA_CONTEXT = {
    'show_save': False,
    'show_save_and_continue': False,
}​
def change_view(self, request, object_id, form_url='',extra_context=READONLY_EXTRA_CONTEXT):
  return super(CorrespondentConfigAdmin,self).change_view(request, object_id, form_url,extra_context=extra_context)</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[翻译] 使用 Django model 锁处理并发]]></title>
        <id>https://lesywix.github.io/post/fan-yi-shi-yong-django-model-suo-chu-li-bing-fa/</id>
        <link href="https://lesywix.github.io/post/fan-yi-shi-yong-django-model-suo-chu-li-bing-fa/">
        </link>
        <updated>2020-02-23T13:20:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="造成并发问题的原因"><strong>造成并发问题的原因：</strong></h2>
<p>假设我们的 model 定义如下：</p>
<pre><code class="language-python">    class Account(models.Model):
        id = models.AutoField(
            primary_key=True,
        )
        user = models.ForeignKey(
            User,
        )
        # 资产
        balance = models.IntegerField(
            default=0,
        )
</code></pre>
<p>并且有如下的逻辑操作：</p>
<pre><code class="language-python">    # 入金
    def deposit(self, amount):
        self.balance += amount
        self.save()
    # 出金
    def withdraw(self, amount):
        if amount &gt; self.balance:
            raise errors.InsufficientFunds()
        self.balance -= amount
        self.save()
</code></pre>
<p>如果是串行，上面的逻辑不会出什么问题，但是如果是并行的话，就有问题了：<br>
假设现在有 user A 和 user B 同时对 balance（初始值为 100） 进行操作</p>
<ol>
<li>user A 获取到 Account obj，此时 balance 为 100</li>
<li>user B 获取到 Account obj，此时 balance 为 100</li>
<li>user A 进行 deposit(50)，此时 balance 为 100 + 50 = 150</li>
<li>user B 进行 withdraw(30)，此时 balance 为 100 - 30 = 70</li>
</ol>
<p>user A 存入了 50，user B 拿出了30，我们期望的结果是 120，最后结果是 70，所以问题就来了。由于并发的原因，B 进行操作的时候，获取到的 Account obj 与 A 是相同的（在 A 获取到 Account obj 但尚未对其进行操作保存时），所以 A 进行的操作对 B 并没有什么影响。</p>
<h2 id="解决方法"><strong>解决方法</strong></h2>
<h3 id="悲观锁"><strong>悲观锁</strong></h3>
<p>即在请求对资源进行操作的时候，锁住要操作的资源，直到整个操作结束则释放锁。</p>
<p>在这里推荐用数据库级别的锁，因为数据库能很好地管理锁处理并发，而且低层面的锁不会因为其他进程或者线程的操作受到影响，另外 Django App 可以跑多进程，维护 App 级别的锁工作量非常大且复杂。</p>
<p>对于 Django 我们可以用 <code>select_for_update()</code> 的方式锁住我们要操作的 obj（对于数据库则是锁住要操作的行） 如：account_obj = Account.objects.select_for_update().get(id=1),这样获取到的 obj 就是有带锁的，其他请求想要对这个资源进行访问需要等待这个 obj 完成才能访问。<br>
参见文档：<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-for-update">https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-for-update</a></p>
<p>这里有几点需要注意：</p>
<ol>
<li>需要在原子操作（atomic）中使用 <code>select_for_update()</code> (原子操作结束才释放锁)</li>
<li>若不需要等待可以带上 <code>nowait=True</code> 的参数，遇到冲突的资源直接 raise DatabaseError</li>
<li>若同时使用了 <code>select_related</code>，则相关资源也会加上锁</li>
</ol>
<p>上锁代码：</p>
<pre><code class="language-python">    @classmethod
    def deposit(cls, id, amount):
       with transaction.atomic():
           account = (
               cls.objects
               .select_for_update()
               .get(id=id)
           )
          
           account.balance += amount
           account.save()
        return account
    
    @classmethod
    def withdraw(cls, id, amount):
       with transaction.atomic():
           account = (
               cls.objects
               .select_for_update()
               .get(id=id)
           )
          
           if account.balance &lt; amount:
               raise errors.InsufficentFunds()
           account.balance -= amount
           account.save()
      
       return account
</code></pre>
<h3 id="乐观锁"><strong>乐观锁</strong></h3>
<p>即在获取资源的时候并不会对相关资源上锁，而是加上一个字段 version，在入库的时候通过判断 version 保证资源更新不冲突。</p>
<p>举个例子：<br>
数据表中有 version 字段，要对某一资源请求的时候，数据需要带上 version，然后用 version 查询数据库，此时若有两个并发请求，获取到的 obj 应该是一样的，然后这两个请求同时修改数据，并将 version 自增 1，在保存的时候，也先查询数据库中存不存在 POST 过来的 version，存在则 save，不存在说明该 version 已经被别人先修改了，version 应该已经增加 1，所以返回修改失败。<br>
用 Django 表达就是 <code>Model.Object.filter(version=version).update(data=data, version=version + 1)</code><br>
返回 1 代表 update 了一行，0 代表失败</p>
<p>这里也有几点需要注意：</p>
<ol>
<li>需要添加多一个字段，并增加逻辑判断</li>
<li>如果有很多并发操作，会造成很多请求失败，因为他会返回操作失败而不是像悲观锁那样会等待请求</li>
<li>需要注意在程序外对数据进行操作可能会造成冲突，比如在 Django shell 中，若没加上逻辑判断对 model 进行更新</li>
<li>由于不像悲观锁有 <code>no_wait = False</code> 可以实现冲突等待，所以使用乐观锁可能需要自己实现失败重试机制</li>
</ol>
<p>上锁代码：</p>
<pre><code class="language-python">    def deposit(self, id, amount):
       updated = Account.objects.filter(
           id=self.id,
           version=self.version,
       ).update(
           balance=balance + amount,
           version=self.version + 1,
       )
       return updated &gt; 0
    def withdraw(self, id, amount):       
       if self.balance &lt; amount:
           raise errors.InsufficentFunds()
      
       updated = Account.objects.filter(
           id=self.id,
           version=self.version,
       ).update(
           balance=balance - amount,
           version=self.version + 1,
       )
      
       return updated &gt; 0
</code></pre>
<h3 id="什么时候用乐观锁什么时候用悲观锁">什么时候用乐观锁，什么时候用悲观锁</h3>
<ul>
<li>如果操作对象有许多并发更新（写操作多），用悲观锁可能更好；操作对象读操作多写操作少，用乐观锁更好</li>
<li>如果更新发生在程序之外(例如，直接在数据库中或 manage shell 中)，悲观锁更安全</li>
<li>如果接口被远程应用或操作系统调用并且有副作用，需要请确保它们的操作安全。比如调用是否会花很长时间导致超时？每次调用是否能保证幂等？</li>
</ul>
<hr>
<p>原文出处： <a href="https://medium.com/@hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2">https://medium.com/@hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义 Django models import 方式]]></title>
        <id>https://lesywix.github.io/post/zi-ding-yi-django-models-import-fang-shi/</id>
        <link href="https://lesywix.github.io/post/zi-ding-yi-django-models-import-fang-shi/">
        </link>
        <updated>2020-02-23T06:05:24.000Z</updated>
        <content type="html"><![CDATA[<p>默认的，我们会把 Django models 放到一个使用 startapp 创建的 app 的目录下，然后在 settings 中的 INSTALLED_APPS 写入这个 app，在运行 Django 或者做 migrate 时， Django 就会自动发现该 app 下的 models，并在 showmigrations 中显示。</p>
<p>但是如果我们需要将原来分散在各个 Apps 中的所有 models 放到同一个 app 的子目录下，例如原来 models 结构可能是 <code>project/account_app/models.py</code>，我们想改成 <code>project/appcore/account/models.py</code> 。这时候 Django 就会发现不了这些 models 了（无法 makemigrations）。如何才能让 Django 发现这些这些 models 呢？</p>
<p>先来看看 Django 源码中 app 中的属性 (django/apps/config.py)：</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/04/29/5cc6fd0a11f8b.jpg" alt="https://i.loli.net/2019/04/29/5cc6fd0a11f8b.jpg" loading="lazy"></figure>
<p>可以看出 all_models 应该就是该 app 中的所有 models，此外我们还可以发现该类中有个 import_models() 方法，可以看出 models_module_name 为 app_name.models，即每个 app 下的 models 文件，已经写死在这儿了。</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2019/04/29/5cc6fd0c46761.jpg" alt="https://i.loli.net/2019/04/29/5cc6fd0c46761.jpg" loading="lazy"></figure>
<p>查看引用了 import_models 的文件（registry.py）</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2019/04/29/5cc6fd0e31c22.jpg" alt="https://i.loli.net/2019/04/29/5cc6fd0e31c22.jpg" loading="lazy"></figure>
<p>传入的 all_models 即 models 中的每个类，然后传给 config.py 初始化 models_module。</p>
<p>当 model 被 import 的时候， ModelBase.<strong>new</strong> 都会调用 apps.register_model 通过参数 all_models 来创建这个 app 对应的 models。</p>
<p>所以想要在子目录中引入 models，我们需要改变 models_module 写死的赋值方式。</p>
<p>比如我们有个 app 叫 appcore，存放所有的 models，目录结构如下：</p>
<pre><code class="language-bash">    .
    ├── README.md
    ├── myproject
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── settings.py
    │   ├── urls.py
    │   ├── views
    │   └── wsgi.py
    ├── appcore
    │   ├── __init__.py
    │   ├── account
    │   │   ├── __init__.py
    │   │   ├── api.py
    │   │   └── models.py
    │   ├── apps.py
    │   ├── base
    │   │   ├── __init__.py
    │   │   ├── api.py
    │   │   └── models.py
    │   ├── comment
    │   │   ├── __init__.py
    │   │   └── models.py
</code></pre>
<p>可以在 apps.py 中覆盖 import_models 方法</p>
<pre><code class="language-python">    # apps.py
    from __future__ import unicode_literals
    import django
    from django.apps import AppConfig
    from importlib import import_module
    from distutils.version import StrictVersion
    
    # sub module
    SUBAPPS = [
        'account',
        'base',
        'commen'
    ]
    
    class AppCoreConfig(AppConfig):
        name = 'appcore'
        # django 1.11 后 all_models 获取方式有变化，因此加个判断
        if StrictVersion(django.get_version()) &gt;= StrictVersion('1.11'):
            def import_models(self):
                self.models = self.apps.all_models[self.label]
                self._import_models()
        else:
            # compatibility for django &lt; 1.11
            def import_models(self, all_models):
                self.models = all_models
                self._import_models()
        # 添加子目录中的 models
        def _import_models(self):
            models_module = None
            for i in SUBAPPS:
                models_module_name = '{}.{}.models'.format(self.name, i)
                models_module = import_module(models_module_name)
            # 最后重新赋值
            self.models_module = models_module
</code></pre>
<p>然后在 settings 中添加此 app（appcore）， 这样就能被 Django 发现该目录下的所有 models 了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[装饰器执行顺序]]></title>
        <id>https://lesywix.github.io/post/zhuang-shi-qi-zhi-xing-shun-xu/</id>
        <link href="https://lesywix.github.io/post/zhuang-shi-qi-zhi-xing-shun-xu/">
        </link>
        <updated>2020-02-21T10:03:01.000Z</updated>
        <content type="html"><![CDATA[<p>考虑如下代码执行顺序：</p>
<pre><code class="language-python">def decorator_a(func):
    print('Get in decorator_a')
    
    def inner_a(*args, **kwargs):
        print('Get in inner_a')
        return func(*args, **kwargs)
    return inner_a
    
    
def decorator_b(func):
    print('Get in decorator_b')
    
    def inner_b(*args, **kwargs):
        print('Get in inner_b')
        return func(*args, **kwargs)
    return inner_b
    
    
@decorator_a
@decorator_b
def f(x):
    print('Get in f')
    return x * 2
    
    
 f(1)
</code></pre>
<p>结果为：</p>
<pre><code>Get in decorator_b
Get in decorator_a
Get in inner_a
Get in inner_b
Get in f
</code></pre>
<p>我们知道，用语法糖的装饰器我们可以将被装饰的函数转换为</p>
<pre><code class="language-python">def f(x):
    print('Get in f')
    return x * 2
f = decorator_a(decorator_b(f))  # decorator 定义省略
    
# 调用 f 函数
f(1)
</code></pre>
<p>因此，当执行到 <code>f = decorator_a(decorator_b(f))</code> 时，先执行了 <code>decorator_b(f)</code> ，输出 <code>Get in decorator_b</code> 并返回 <code>inner_b</code> 函数，然后传递给 <code>decorator_a</code> 作为参数，即 <code>decorator_a(inner_b)</code> ，输出 <code>Get in decorator_a</code> 并返回 <code>inner_a</code> 函数。</p>
<p>当执行到 <code>f(1)</code> 调用 f 函数时，相当于执行了 <code>decorator_a(decorator_b(f))(1)</code> 。由前面得知 <code>decorator_a(decorator_b(f))</code> 返回了 <code>inner_a</code> 函数，所以 <code>decorator_a(decorator_b(f))(1)</code> 等价于 <code>inner_a(1)</code> ，于是进入到 <code>inner_a</code> 函数输出 <code>Get in inner_a</code> 并执行函数内的 <code>func(*args, **kwargs)</code>，这里 <code>func</code> 即为 <code>decorator_a</code> 的参数：<code>decorator_b(f)</code> ，即 <code>func(*args, **kwargs) -&gt; decorator_b(f)(1) -&gt; inner_b(1)</code>  ，所以类似于前面同样的逻辑，进入到 <code>inner_b</code> 函数输出 <code>Get in inner_b</code> 并执行 <code>func(*args, **kwargs)</code>，这里 <code>func</code> 即为 f 函数，所以最后进入 f 函数，输出 <code>Get in f</code> 。</p>
<p>前面的逻辑看起来有点绕，我们也可以用栈的思想来理解：在定义装饰器函数的时候，相当于函数入栈，上面的例子就是 <code>f -&gt; decorator_b -&gt; decorator_a</code>；在被调用的地方，相当于函数出栈 <code>decorator_a -&gt; decorator_b -&gt; f</code> 。</p>
<p>由上面的例子，我们再来思考一下三层嵌套的装饰器（即包含装饰器本身的参数）的输出情况：</p>
<pre><code class="language-python">def decorator_a(n):
    print(f'Get in decorator_a, n: {n}')
    
    def middle_a(func):
        print('Get in middle_a')
    
        def inner_a(*args, **kwargs):
            print('Get in inner_a')
            return func(*args, **kwargs)
        return inner_a
    return middle_a
    
    
def decorator_b(n):
    print(f'Get in decorator_b, n: {n}')
    
    def middle_b(func):
        print('Get in middle_b')
    
        def inner_b(*args, **kwargs):
            print('Get in inner_b')
            return func(*args, **kwargs)
        return inner_b
    return middle_b
    
    
@decorator_a('a')
@decorator_b('b')
def f(x):
    print('Get in f')
    return x * 2
    
    
f(1)
</code></pre>
<p>结果为：</p>
<pre><code>Get in decorator_a, n: a
Get in decorator_b, n: b
Get in middle_b
Get in middle_a
Get in inner_a
Get in inner_b
Get in f
</code></pre>
<p>对于三层嵌套结构，我们同样可以将语法糖形式转换为函数形式。上面的例子可以写为:</p>
<pre><code class="language-py">def f(x):
    print('Get in f')
    return x * 2
f = decorator_a(n)(decorator_b(n)(f))  # decorator 定义省略
    
# 调用 f 函数
f(1)
</code></pre>
<p>与两层嵌套不同的是，三层嵌套在包装时已经调用了最外层，并返回内层函数（先剥开了最外层，并返回剩下的内容，剩下的内容不难发现与二层装饰器相同）。如果我们只看一个装饰器的话，即 <code>f = decorator_a(n)(f)</code> 所以会先调用装饰器，进入装饰器最外层并输出 <code>Get in decorator_a, n: a</code> ，然后返回里面两层结构（后面的分析就与前一个例一样了）</p>
]]></content>
    </entry>
</feed>